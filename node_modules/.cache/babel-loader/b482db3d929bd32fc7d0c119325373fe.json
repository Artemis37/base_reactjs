{"ast":null,"code":"const dateToDDMMYY = date => {\n  const yyyy = date.getFullYear();\n  let mm = date.getMonth() + 1;\n  let dd = date.getDate();\n  if (dd < 10) dd = `0${dd}`;\n  if (mm < 10) mm = `0${mm}`;\n  const formatted = `${dd}/${mm}/${yyyy}`;\n  return formatted;\n};\n\nconst DDMMYYToDate = dateString => {\n  const dateParts = dateString.split('/');\n  const dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n  dateObject.setHours(12);\n  return dateObject;\n};\n\n_c = DDMMYYToDate;\n\nfunction ExcelDateToJSDate(serial) {\n  const utcDays = Math.floor(serial - 25569);\n  const utcValue = utcDays * 86400;\n  const dateInfo = new Date(utcValue * 1000);\n  const fractionalDay = serial - Math.floor(serial) + 0.0000001;\n  let totalDeconds = Math.floor(86400 * fractionalDay);\n  const seconds = totalDeconds % 60;\n  totalDeconds -= seconds;\n  const hours = Math.floor(totalDeconds / (60 * 60));\n  const minutes = Math.floor(totalDeconds / 60) % 60;\n  return new Date(dateInfo.getFullYear(), dateInfo.getMonth(), dateInfo.getDate(), hours, minutes, seconds);\n}\n\n_c2 = ExcelDateToJSDate;\nexport { dateToDDMMYY, DDMMYYToDate, ExcelDateToJSDate };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DDMMYYToDate\");\n$RefreshReg$(_c2, \"ExcelDateToJSDate\");","map":{"version":3,"names":["dateToDDMMYY","date","yyyy","getFullYear","mm","getMonth","dd","getDate","formatted","DDMMYYToDate","dateString","dateParts","split","dateObject","Date","setHours","ExcelDateToJSDate","serial","utcDays","Math","floor","utcValue","dateInfo","fractionalDay","totalDeconds","seconds","hours","minutes"],"sources":["C:/Users/DELL/Downloads/ClientApp/src/utils/date.js"],"sourcesContent":["const dateToDDMMYY = (date) => {\n  const yyyy = date.getFullYear()\n  let mm = date.getMonth() + 1\n  let dd = date.getDate()\n\n  if (dd < 10) dd = `0${dd}`\n  if (mm < 10) mm = `0${mm}`\n\n  const formatted = `${dd}/${mm}/${yyyy}`\n  return formatted\n}\nconst DDMMYYToDate = (dateString) => {\n  const dateParts = dateString.split('/')\n  const dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0])\n  dateObject.setHours(12)\n  return dateObject\n}\n\nfunction ExcelDateToJSDate(serial) {\n  const utcDays = Math.floor(serial - 25569)\n  const utcValue = utcDays * 86400\n  const dateInfo = new Date(utcValue * 1000)\n\n  const fractionalDay = serial - Math.floor(serial) + 0.0000001\n\n  let totalDeconds = Math.floor(86400 * fractionalDay)\n\n  const seconds = totalDeconds % 60\n\n  totalDeconds -= seconds\n\n  const hours = Math.floor(totalDeconds / (60 * 60))\n  const minutes = Math.floor(totalDeconds / 60) % 60\n\n  return new Date(\n    dateInfo.getFullYear(),\n    dateInfo.getMonth(),\n    dateInfo.getDate(),\n    hours,\n    minutes,\n    seconds,\n  )\n}\n\nexport { dateToDDMMYY, DDMMYYToDate, ExcelDateToJSDate }\n"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,IAAD,IAAU;EAC7B,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAL,EAAb;EACA,IAAIC,EAAE,GAAGH,IAAI,CAACI,QAAL,KAAkB,CAA3B;EACA,IAAIC,EAAE,GAAGL,IAAI,CAACM,OAAL,EAAT;EAEA,IAAID,EAAE,GAAG,EAAT,EAAaA,EAAE,GAAI,IAAGA,EAAG,EAAZ;EACb,IAAIF,EAAE,GAAG,EAAT,EAAaA,EAAE,GAAI,IAAGA,EAAG,EAAZ;EAEb,MAAMI,SAAS,GAAI,GAAEF,EAAG,IAAGF,EAAG,IAAGF,IAAK,EAAtC;EACA,OAAOM,SAAP;AACD,CAVD;;AAWA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;EACnC,MAAMC,SAAS,GAAGD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAAlB;EACA,MAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,CAACH,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAvC,EAA0C,CAACA,SAAS,CAAC,CAAD,CAApD,CAAnB;EACAE,UAAU,CAACE,QAAX,CAAoB,EAApB;EACA,OAAOF,UAAP;AACD,CALD;;KAAMJ,Y;;AAON,SAASO,iBAAT,CAA2BC,MAA3B,EAAmC;EACjC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,KAApB,CAAhB;EACA,MAAMI,QAAQ,GAAGH,OAAO,GAAG,KAA3B;EACA,MAAMI,QAAQ,GAAG,IAAIR,IAAJ,CAASO,QAAQ,GAAG,IAApB,CAAjB;EAEA,MAAME,aAAa,GAAGN,MAAM,GAAGE,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAT,GAA8B,SAApD;EAEA,IAAIO,YAAY,GAAGL,IAAI,CAACC,KAAL,CAAW,QAAQG,aAAnB,CAAnB;EAEA,MAAME,OAAO,GAAGD,YAAY,GAAG,EAA/B;EAEAA,YAAY,IAAIC,OAAhB;EAEA,MAAMC,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWI,YAAY,IAAI,KAAK,EAAT,CAAvB,CAAd;EACA,MAAMG,OAAO,GAAGR,IAAI,CAACC,KAAL,CAAWI,YAAY,GAAG,EAA1B,IAAgC,EAAhD;EAEA,OAAO,IAAIV,IAAJ,CACLQ,QAAQ,CAACnB,WAAT,EADK,EAELmB,QAAQ,CAACjB,QAAT,EAFK,EAGLiB,QAAQ,CAACf,OAAT,EAHK,EAILmB,KAJK,EAKLC,OALK,EAMLF,OANK,CAAP;AAQD;;MAxBQT,iB;AA0BT,SAAShB,YAAT,EAAuBS,YAAvB,EAAqCO,iBAArC"},"metadata":{},"sourceType":"module"}